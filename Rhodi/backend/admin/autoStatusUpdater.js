const ProductDetail = require("./model/ProductDetailModel");
const PromotionProgram = require("./model/PromotionProgram");
const ProductPromotion = require("./model/ProductPromotion"); // ch·ªânh path t√πy theo d·ª± √°n

const autoUpdateProductStatus = async () => {
  try {
    const productsToUpdate = await ProductDetail.find({
      quantity: 0,
      status: { $ne: 2 },
    });

    if (productsToUpdate.length > 0) {
      const updatePromises = productsToUpdate.map((product) =>
        ProductDetail.findByIdAndUpdate(product._id, { status: 2 })
      );
      await Promise.all(updatePromises);
      console.log(
        `[AutoStatus] ‚úÖ C·∫≠p nh·∫≠t ${productsToUpdate.length} s·∫£n ph·∫©m v·ªÅ status = 2`
      );
    } else {
      console.log("[AutoStatus] ‚è≥ Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o c·∫ßn c·∫≠p nh·∫≠t");
    }
  } catch (err) {
    console.error("[AutoStatus] ‚ùå L·ªói khi c·∫≠p nh·∫≠t s·∫£n ph·∫©m:", err.message);
  }
};

const autoUpdatePromotionStatus = async () => {
  try {
    const today = new Date();

    // Ch·ªâ t√¨m c√°c ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i ƒëang ·ªü tr·∫°ng th√°i 'pending'
    const pendingPromotions = await PromotionProgram.find({
      status: "pending",
    });

    await Promise.all(
      pendingPromotions.map(async (promotion) => {
        const { startDate, endDate, status } = promotion;

        // N·∫øu h√¥m nay n·∫±m trong kho·∫£ng startDate ƒë·∫øn endDate => chuy·ªÉn sang 'active'
        if (startDate <= today && today <= endDate) {
          promotion.status = "active";
          await promotion.save();

          // C·∫≠p nh·∫≠t status c√°c ProductPromotion li√™n quan th√†nh true
          await ProductPromotion.updateMany(
            { promotionProgram: promotion._id },
            { $set: { status: true } }
          );

          console.log(
            `‚úÖ ƒê√£ chuy·ªÉn khuy·∫øn m√£i ${promotion._id} sang tr·∫°ng th√°i 'active' v√† c·∫≠p nh·∫≠t ProductPromotion`
          );
        }
      })
    );

    console.log("üü¢ ƒê√£ ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c khuy·∫øn m√£i  h·ª£p l·ªá");
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t khuy·∫øn m√£i:", err.message);
  }
};

const startAutoTasks = () => {
  autoUpdateProductStatus();
  autoUpdatePromotionStatus();

  setInterval(() => {
    autoUpdateProductStatus();
    autoUpdatePromotionStatus();
  }, 60 * 1000); // 1 ph√∫t (n√™n d√πng thay v√¨ 1 gi√¢y)
};

module.exports = startAutoTasks;
